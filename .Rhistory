# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
# Extract the first two principal components
principal_components <- pca_result$scores[, 1:2]
summary(pca_result)
# Variance explained by each principal component
cumulative_variance <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
cat("Cumulative Variance Explained:\n", cumulative_variance, "\n")
# Print the first few rows of the transformed data
head(principal_components)
# Load the package
library(fastDummies)
# Assuming 'crimes' is the name of your dataset
# Replace 'crimes' with the actual name of your dataset
# Create dummy variables
crimes <- dummy_cols(crimes$STATE.UT)
crimes <- dummy_cols(crimes$STATE.UT)
install.packages("fastDummies")
# Load the package
library(fastDummies)
install.packages("fastDummies")
crimes <- dummy_cols(crimes$STATE.UT)
library(fastDummies)
crimes <- dummy_cols(crimes$STATE.UT)
class(crimes$STATE.UT)
crimes <- dummy_cols(select(crimes, STATE.UT))
crimes <- dummy_cols(select(crimes, STATE.UT))
any(is.na(crimes$STATE.UT))
crimes <- dummy_cols(select(crimes, STATE.UT))
crimes <- dummy_cols(crimes$STATE.UT)
getwd()
setwd("C:/Users/HP/Desktop/Eliabe_2022474CA1_dataEXP")
# reading data
crimes<-read.csv(file="C:/Users/HP/Desktop/Eliabe_2022474CA1_dataEXP/crimes.csv",stringsAsFactors=TRUE)
head(crimes)
# Load the package
library(fastDummies)
# Create dummy variables
crimes <- dummy_cols(crimes$STATE.UT)
# Display the result
head(crimes, 10)
# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
# Extract the first two principal components
principal_components <- pca_result$scores[, 1:2]
summary(pca_result)
# Variance explained by each principal component
cumulative_variance <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
cat("Cumulative Variance Explained:\n", cumulative_variance, "\n")
# Print the first few rows of the transformed data
head(principal_components)
crimes <- as.data.frame(crimes)
# Identify numeric columns
numeric_columns <- sapply(crimes, is.numeric)
# Handle missing values for numeric columns
crimes[, numeric_columns] <- lapply(crimes[, numeric_columns], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
crimes[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crimes) %in% columns_to_exclude)]
# Identify numeric columns in the subset
numeric_columns_subset <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_data <- scale(crime_data_subset[, numeric_columns_subset])
# Perform PCA using prcomp
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scores <- pca_result$x
pc_loadings <- pca_result$rotation
# View the results
print(pc_scores)
print(pc_loadings)
summary(pca_result)
print(pc_scores)
print(pc_loadings)
summary(pca_result)
# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
# Extract the first two principal components
principal_components <- pca_result$scores[, 1:2]
summary(pca_result)
# Variance explained by each principal component
cumulative_variance <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
cat("Cumulative Variance Explained:\n", cumulative_variance, "\n")
# Print the first few rows of the transformed data
head(principal_components)
data <- crimes
# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
# Extract the first two principal components
principal_components <- pca_result$scores[, 1:3]
summary(pca_result)
# Variance explained by each principal component
cumulative_variance <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
cat("Cumulative Variance Explained:\n", cumulative_variance, "\n")
# Print the first few rows of the transformed data
head(principal_components)
print(pc_scores)
print(pc_loadings)
pca_result1 <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
pc_scores <- pca_result1$x
pc_loadings <- pca_result1$rotation
print(pc_scores)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
crime<-read.csv(file="C:/Users/HP/Desktop/Eliabe_2022474CA1_dataEXP/crimes.csv",stringsAsFactors=TRUE)
crime <- as.data.frame(crime)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
crimes<-read.csv(file="C:/Users/HP/Documents/R-studio/crime.csv",stringsAsFactors=TRUE)
crime <- as.data.frame(crime)
numeric_column <- sapply(crime, is.numeric)
crime[, numeric_column] <- lapply(crime[, numeric_column], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
crime[is.infinite(as.matrix(crimes))] <- 1e6
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crime) %in% columns_to_exclude)]
numeric_columns_subse <- sapply(crime_data_subset, is.numeric)
scaled_dat <- scale(crime_data_subset[, numeric_columns_subse])
pca_result2 <- prcomp(scaled_dat, center = TRUE, scale. = TRUE)
pca_result2  <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
pc_scorese <- pca_result2$x
pc_loadingse <- pca_result2$rotation
print(pc_scorese)
print(pc_loadingse)
data <- crimes
# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
crimes<-read.csv(file="C:/Users/HP/Documents/R-studio/crime.csv",stringsAsFactors=TRUE)
crime <- as.data.frame(crime)
# Identify numeric columns
numeric_column <- sapply(crime, is.numeric)
# Handle missing values for numeric columns
crime[, numeric_column] <- lapply(crime[, numeric_column], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
crime[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crime) %in% columns_to_exclude)]
# Identify numeric columns in the subset
numeric_columns_subse <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_dat <- scale(crime_data_subset[, numeric_columns_subse])
# Perform PCA using prcomp
pca_result2  <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scorese <- pca_result2$x
pc_loadingse <- pca_result2$rotation
# View the results
print(pc_scorese)
print(pc_loadingse)
summary(pca_result)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
crimes<-read.csv(file="C:/Users/HP/Documents/R-studio/crime.csv",stringsAsFactors=TRUE)
crime <- as.data.frame(crime)
# Identify numeric columns
numeric_column <- sapply(crime, is.numeric)
# Handle missing values for numeric columns
crime[, numeric_column] <- lapply(crime[, numeric_column], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
crime[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crime) %in% columns_to_exclude)]
# Identify numeric columns in the subset
numeric_columns_subse <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_dat <- scale(crime_data_subset[, numeric_columns_subse])
# Perform PCA using prcomp
pca_result2  <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scorese <- pca_result2$x
pc_loadingse <- pca_result2$rotation
print(pc_scorese)
print(pc_loadingse)
summary(pca_result)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
cri<-read.csv(file="C:/Users/HP/Documents/R-studio/cri.csv",stringsAsFactors=TRUE)
cri <- as.data.frame(crim)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
cri<-read.csv(file="C:/Users/HP/Documents/R-studio/cri.csv",stringsAsFactors=TRUE)
cri <- as.data.frame(cri)
# Identify numeric columns
numeric_column <- sapply(cri, is.numeric)
# Handle missing values for
cri[, numeric_column] <- lapply(crime[, numeric_column], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
cri[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crime) %in% columns_to_exclude)]
numeric_columns_subse <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_dat <- scale(crime_data_subset[, numeric_columns_subse])
# Perform PCA using prcomp
pca_result2  <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scorese <- pca_result2$x
pc_loadingse <- pca_result2$rotation
print(pc_scorese)
print(pc_loadingse)
summary(pca_result)
data <- cri
# Identify numeric columns
numeric_columns <- sapply(data, is.numeric)
# Subset the data to include only numeric columns
numeric_data <- data[, numeric_columns]
# Handle missing values (replace NAs with column means)
for (col in colnames(numeric_data)) {
numeric_data[is.na(numeric_data[, col]), col] <- mean(numeric_data[, col], na.rm = TRUE)
}
# Scale the numeric data
scaled_data <- scale(numeric_data)
# Perform PCA with two components
library(stats)
pca_result <- princomp(scaled_data, cor = TRUE)
# Identify numeric columns
numeric_columns <- sapply(crimes, is.numeric)
# Handle missing values for numeric columns
crimes[, numeric_columns] <- lapply(crimes[, numeric_columns], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
crimes[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crimes) %in% columns_to_exclude)]
# Identify numeric columns in the subset
numeric_columns_subset <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_data <- scale(crime_data_subset[, numeric_columns_subset])
# Perform PCA using prcomp
pca_result1 <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scores <- pca_result1$x
pc_loadings <- pca_result1$rotation
# View the results
print(pc_scores)
print(pc_loadings)
summary(pca_result1)  # Corrected typo
path <- "file:///C:/Users/HP/Documents/R-studio/Students.csv"
Students <- read.csv(path, sep = ";", dec = ",", na.strings = c(".", "NA", "", "?"),
strip.white = TRUE, encoding = "UTF-8", row.names = 1)
PCA <- princomp(na.omit(Students), scale=TRUE, center=TRUE, tol=0)
PCA
# loadings for first 3 components
unclass(PCA$loadings[,1:3])
PCA$scores[,1:3]
summary(PCA)
# Identify numeric columns
numeric_columns <- sapply(crimes, is.numeric)
# Handle missing values for numeric columns
crimes[, numeric_columns] <- lapply(crimes[, numeric_columns], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Replace infinite values with a large number (adjust as needed)
crimes[is.infinite(as.matrix(crimes))] <- 1e6
# Exclude unnecessary columns
columns_to_exclude <- c('index', 'STATE/UT', 'DISTRICT', 'YEAR')
crime_data_subset <- crimes[, !(names(crimes) %in% columns_to_exclude)]
# Identify numeric columns in the subset
numeric_columns_subset <- sapply(crime_data_subset, is.numeric)
# Scale only the numeric columns
scaled_data <- scale(crime_data_subset[, numeric_columns_subset])
# Perform PCA using prcomp
pca_result1 <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Extract the scores and loadings
pc_scores <- pca_result1$x
pc_loadings <- pca_result1$rotation
# View the results
print(pc_scores)
print(pc_loadings)
summary(pca_result1)  # Corrected typo
unclass(PCA$pc_loadings[,1:3])
PCA$pc_scores[,1:3]
summary(pca_result1)
unclass(PCA$pc_loadings[,5:8])
unclass(PCA$pc_loadings[,6:8])
print(head(pc_scores, 3))
pc_loadings <- pca_result1$rotation[, 1:3]
print(loadings_subset)
print(pc_loadings)
pc_loadings <- pca_result1$rotation[, 1:3]
print(pc_scores)
unclass(PCA$loadings[,1:3])
PCA$scores[,1:3]
summary(PCA)
pc_scores <- pca_result1$x
print(pc_scores)
pc_scores <- pca_result1$x[, 1:3]
pc_scores <- pca_result1$x[, 1:3]
print(pc_scores)
print(pc_loadings)
print(pc_loadings)
source("C:/Users/HP/Desktop/Eliabe_2022474CA1_dataEXP/Eliabe_2022474_data.R")
pc_scores <- pca_result1$x[, 1:4]
print(pc_scores)
pc_loadings <- pca_result1$rotation[, 1:4]
print(pc_loadings)
pc_loadings <- pca_result1$rotation[, 11:13]
print(pc_loadings)
# f) Apply dummy encoding to categorical variables (at least one variable used from the data set) and
# discuss the benefits of dummy encoding to understand the categorical data.
install.packages("fastDummies")
# Load the package
library(fastDummies)
# Create dummy variables
crimes <- dummy_cols(crimes$STATE.UT)
# Display the result
head(crimes, 10)
install.packages("fastDummies")
head(crimes, 30)
# b) Calculate the statistical parameters (mean, median, minimum, maximum, and standard deviation)
# for each of the numerical variables.
# As I have some NA in my numeric columns, I need to covert those to 0
variables_to_replace <- c("MURDER", "YEAR", "CULPABLE_HOMICIDE",
"RAPE", "CUSTODIAL_RAPE","OTHER_RAPE","KIDNAPPING_ACY_ABDUCTION",
"KIDNAPPING_WOMEN_GIRLS","ROBBERY","BURGLARY",
"THEFT","AUTO_THEFT","RIOTS", "CHEATING")
# Loop through each variable and replace NA with 0
for (variable in variables_to_replace) {
# Check if there are any NA values in the column
if (any(is.na(crimes[[variable]]))) {
crimes[[variable]][is.na(crimes[[variable]])] <- 0
} else {
cat(paste("No NA values found in column '", variable, "'. Skipping.\n"))
}
}
# Select from my column 5 to 18
# Apply mean, median, minimum, maximum, and standard deviation to selected columns
summary_crimes <- apply(crimes[, 5:18], 2, function(x)
c(mean = mean(x), median = median(x), min = min(x), max = max(x), sd = sd(x)))
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
summary_crimes_c <- as.data.frame(summary_crimes)[,1,1]
print(summary_crimes_c)
summary_crimes_c <- as.data.frame(summary_crimes)[,5,1]
print(summary_crimes_c)
summary_crimes_c <- as.data.frame(summary_crimes)[,5,5]
print(summary_crimes_c)
summary_crimes_c <- as.data.frame(summary_crimes)[,5:5]
print(summary_crimes_c)
print(summary_crimes_c)
print(summary_crimes_c)
summary_crimes_c <- as.data.frame(summary_crimes)
print(summary_crimes_c)
# b) Calculate the statistical parameters (mean, median, minimum, maximum, and standard deviation)
# for each of the numerical variables.
# As I have some NA in my numeric columns, I need to covert those to 0
variables_to_replace <- c("MURDER", "YEAR", "CULPABLE_HOMICIDE",
"RAPE", "CUSTODIAL_RAPE","OTHER_RAPE","KIDNAPPING_ACY_ABDUCTION",
"KIDNAPPING_WOMEN_GIRLS","ROBBERY","BURGLARY",
"THEFT","AUTO_THEFT","RIOTS", "CHEATING")
# Loop through each variable and replace NA with 0
for (variable in variables_to_replace) {
# Check if there are any NA values in the column
if (any(is.na(crimes[[variable]]))) {
crimes[[variable]][is.na(crimes[[variable]])] <- 0
} else {
cat(paste("No NA values found in column '", variable, "'. Skipping.\n"))
}
}
# Select from my column 5 to 18
# Apply mean, median, minimum, maximum, and standard deviation to selected columns
summary_crimes <- apply(crimes[, 5:18], 2, function(x)
c(mean = mean(x), median = median(x), min = min(x), max = max(x), sd = sd(x)))
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
getwd()
setwd("C:/Users/HP/Documents/R-studio")
# reading data
crimes<-read.csv(file="C:/Users/HP/Documents/R-studio/crimes.csv",stringsAsFactors=TRUE)
head(crimes)
# Exploring cate
# As I have some NA in my numeric columns, I need to covert those to 0
variables_to_replace <- c("MURDER", "YEAR", "CULPABLE_HOMICIDE",
"RAPE", "CUSTODIAL_RAPE","OTHER_RAPE","KIDNAPPING_ACY_ABDUCTION",
"KIDNAPPING_WOMEN_GIRLS","ROBBERY","BURGLARY",
"THEFT","AUTO_THEFT","RIOTS", "CHEATING")
# Loop through each variable and replace NA with 0
for (variable in variables_to_replace) {
# Check if there are any NA values in the column
if (any(is.na(crimes[[variable]]))) {
crimes[[variable]][is.na(crimes[[variable]])] <- 0
} else {
cat(paste("No NA values found in column '", variable, "'. Skipping.\n"))
}
}
# Select from my column 5 to 18
# Apply mean, median, minimum, maximum, and standard deviation to selected columns
summary_crimes <- apply(crimes[, 5:18], 2, function(x)
c(mean = mean(x), median = median(x), min = min(x), max = max(x), sd = sd(x)))
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
# As I have some NA in my numeric columns, I need to covert those to 0
variables_to_replace <- c("MURDER", "YEAR", "CULPABLE_HOMICIDE",
"RAPE", "CUSTODIAL_RAPE","OTHER_RAPE","KIDNAPPING_ACY_ABDUCTION",
"KIDNAPPING_WOMEN_GIRLS","ROBBERY","BURGLARY",
"THEFT","AUTO_THEFT","RIOTS", "CHEATING")
# Loop through each variable and replace NA with 0
for (variable in variables_to_replace) {
# Check if there are any NA values in the column
if (any(is.na(crimes[[variable]]))) {
crimes[[variable]][is.na(crimes[[variable]])] <- 0
} else {
cat(paste("No NA values found in column '", variable, "'. Skipping.\n"))
}
}
# Select from my column 5 to 18
# Apply mean, median, minimum, maximum, and standard deviation to selected columns
summary_crimes <- apply(crimes[, 5:18], 2, function(x)
c(mean = mean(x), median = median(x), min = min(x), max = max(x), sd = sd(x)))
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
print(summary_crimes_c)
print(summary_crimes_c)
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
variables_to_replace <- c("MURDER", "YEAR", "CULPABLE_HOMICIDE",
"RAPE", "CUSTODIAL_RAPE","OTHER_RAPE","KIDNAPPING_ACY_ABDUCTION",
"KIDNAPPING_WOMEN_GIRLS","ROBBERY","BURGLARY",
"THEFT","AUTO_THEFT","RIOTS", "CHEATING")
# Loop through each variable and replace NA with 0
for (variable in variables_to_replace) {
# Check if there are any NA values in the column
if (any(is.na(crimes[[variable]]))) {
crimes[[variable]][is.na(crimes[[variable]])] <- 0
} else {
cat(paste("No NA values found in column '", variable, "'. Skipping.\n"))
}
}
# Select from my column 5 to 18
# Apply mean, median, minimum, maximum, and standard deviation to selected columns
summary_crimes <- apply(crimes[, 5:18], 2, function(x)
c(mean = mean(x), median = median(x), min = min(x), max = max(x), sd = sd(x)))
# Convert the result to a data frame for better readability
summary_crimes_c <- as.data.frame(summary_crimes)
# Print the result
print(summary_crimes_c)
source("C:/Users/HP/Desktop/Eliabe_2022474CA1_dataEXP/Eliabe_2022474_data.R")
